# Generated by Django 5.1.7 on 2025-05-13 01:30

import academia.models
import datetime
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_period', models.CharField(help_text="E.g., '2025 - Ciclo 1', '2025 - C1'", max_length=50, verbose_name='academic period')),
                ('day_of_week', models.CharField(choices=[('SUN', 'Sunday'), ('MON', 'Monday'), ('TUE', 'Tuesday'), ('WED', 'Wednesday'), ('THU', 'Thursday'), ('FRI', 'Friday'), ('SAT', 'Saturday')], help_text='Day of the week the course is held.', max_length=3, verbose_name='day of week')),
                ('start_time', models.TimeField(help_text='Format: HH:MM', verbose_name='start time')),
                ('start_date', models.DateField(help_text='Format: YYYY-MM-DD', validators=[academia.models.validate_date], verbose_name='start date')),
                ('end_date', models.DateField(blank=True, help_text='Calculated automatically if not provided, based on start date and number of lessons.', null=True, validators=[academia.models.validate_date], verbose_name='end date')),
                ('is_active', models.BooleanField(default=True, help_text='Is this course currently active?', verbose_name='is active')),
            ],
            options={
                'verbose_name': 'course',
                'verbose_name_plural': 'courses',
                'ordering': ['-academic_period', 'subject__name', 'start_date'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('surname', models.CharField(max_length=128, verbose_name='surname')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='email')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='phone number')),
                ('date_of_birth', models.DateField(blank=True, help_text='Format: YYYY-MM-DD', null=True, validators=[academia.models.validate_date], verbose_name='date of birth')),
            ],
            options={
                'verbose_name': 'student',
                'verbose_name_plural': 'students',
                'ordering': ['surname', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='subject name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('number_of_lessons', models.PositiveIntegerField(default=10, help_text='Default number of lessons for courses of this subject.', verbose_name='number of lessons')),
            ],
            options={
                'verbose_name': 'subject',
                'verbose_name_plural': 'subjects',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('surname', models.CharField(max_length=128, verbose_name='surname')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='email')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='phone number')),
            ],
            options={
                'verbose_name': 'teacher',
                'verbose_name_plural': 'teachers',
                'ordering': ['surname', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateField(default=datetime.date.today, verbose_name='enrollment date')),
                ('homework_score', models.DecimalField(blank=True, decimal_places=2, help_text='Overall score for homeworks/tasks (e.g., out of 100).', max_digits=5, null=True, verbose_name='homework score')),
                ('exam_score', models.DecimalField(blank=True, decimal_places=2, help_text='Score for the final exam (e.g., out of 100).', max_digits=5, null=True, verbose_name='exam score')),
                ('status', models.CharField(choices=[('ENROLLED', 'Enrolled'), ('COMPLETED', 'Completed'), ('DROPPED', 'Dropped Out')], default='ENROLLED', max_length=20, verbose_name='status')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='academia.course', verbose_name='course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='academia.student', verbose_name='student')),
            ],
            options={
                'verbose_name': 'enrollment',
                'verbose_name_plural': 'enrollments',
                'ordering': ['course', 'student__surname', 'student__name'],
                'unique_together': {('student', 'course')},
            },
        ),
        migrations.AddField(
            model_name='course',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='academia.subject', verbose_name='subject'),
        ),
        migrations.AddField(
            model_name='course',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='academia.teacher', verbose_name='teacher'),
        ),
        migrations.CreateModel(
            name='AttendanceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson_date', models.DateField(validators=[academia.models.validate_date], verbose_name='lesson date')),
                ('lesson_number', models.PositiveIntegerField(help_text='Indicates which lesson of the course this is (e.g., 1, 2, ..., N).', verbose_name='lesson number')),
                ('is_present', models.BooleanField(default=False, verbose_name='was present')),
                ('notes', models.TextField(blank=True, help_text='Optional notes by the teacher for this session.', null=True, verbose_name='notes')),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_logs', to='academia.enrollment', verbose_name='enrollment')),
            ],
            options={
                'verbose_name': 'attendance log',
                'verbose_name_plural': 'attendance logs',
                'ordering': ['enrollment', 'lesson_date', 'lesson_number'],
                'unique_together': {('enrollment', 'lesson_number')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='course',
            unique_together={('subject', 'academic_period', 'day_of_week', 'start_time')},
        ),
    ]
